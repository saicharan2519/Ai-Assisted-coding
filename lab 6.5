{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNk1rLuL2bdXUjJ9ZnAO6lO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/saicharan2519/Ai-Assisted-coding/blob/main/lab%206.5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Assignment** **6.5**\n",
        "\n",
        "**Question**\n",
        "\n",
        "**Lab 6: AI-Based Code Completion: Working with suggestions for classes, loops,\n",
        "conditionals**\n",
        "\n",
        "Lab Assignment 1: Intelligent Code Completion for Object-Oriented Programming\n",
        "Objective: To explore AI-powered code assistants for writing Python classes,\n",
        "constructors, and methods through intelligent suggestions.\n",
        "Suppose that you are hired as an intern at a tech company that develops inventory\n",
        "\n",
        "management systems. Your manager asks you to create a Product class and a\n",
        "Warehouse class with some basic methods. You have decided to use AI-powered code\n",
        "suggestions to help speed up development and reduce syntax errors.\n",
        "\n",
        "Tasks to be completed are as below\n",
        "1. Setup AI Coding Tool:\n",
        "• Install and configure GitHub Copilot or Kite with VS Code or JetBrains IDE.\n",
        "• Enable real-time code suggestions.\n",
        "2. Class Design Using AI Assistance:\n",
        "• Begin defining a Product class with attributes: name, price, quantity.\n",
        "• Use the AI suggestion feature to automatically complete the __init__() method.\n",
        "• Add a method calculate_value() to return price * quantity.\n",
        "15.08.2025 EOD\n",
        "3. Create Another Class:\n",
        "• Define a Warehouse class with a list of Product objects.\n",
        "• Use code completion to help implement:\n",
        "o A method to add a product.\n",
        "o A method to display the most valuable product.\n",
        "4. Reflection:\n",
        "• Identify how much of the code was completed by AI and what manual edits\n",
        "were needed.\n",
        "• Comment on the relevance and accuracy of AI suggestions.\n",
        "Requirements:\n",
        "• VS Code with Github Copilot or Cursor API and/or Google Colab with\n",
        "Gemini\n",
        "\n",
        "Deliverables:\n",
        "• Python script with both classes and comments on AI-generated suggestions.\n",
        "• Short report (1 page) summarizing your experience with AI code completion.\n",
        "\n",
        "**Prompt :1**\n",
        "\n",
        "Write a Python program with a Product class. The class should have attributes name, price, and quantity. Add a method calculate_value() that returns the total value . Then write code to take input from the user, create a Product object, and print the total value\n",
        "\n",
        "**Prompt :2**\n",
        "\n",
        "Write a Python program with a Warehouse class that stores multiple Product objects,and add methods to a product to the warehouse and display the most valuable product with user input"
      ],
      "metadata": {
        "id": "l9nR1-GWzm42"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "16b255ee",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4b0aa181-b8a3-44da-c96e-268415b38ba2"
      },
      "source": [
        "# ---- Product Class ----\n",
        "class Product:\n",
        "    def __init__(self, name, price, quantity):\n",
        "        # AI suggested: auto-completed the __init__ method with parameters\n",
        "        self.name = name\n",
        "        self.price = price\n",
        "        self.quantity = quantity\n",
        "\n",
        "    def calculate_value(self):\n",
        "        # AI suggested the return statement after detecting class attributes\n",
        "        return self.price * self.quantity\n",
        "\n",
        "\n",
        "# ---- Warehouse Class ----\n",
        "class Warehouse:\n",
        "    def __init__(self):\n",
        "        self.products = []\n",
        "\n",
        "    def add_product(self, product):\n",
        "        self.products.append(product)\n",
        "\n",
        "    def most_valuable_product(self):\n",
        "        if not self.products:\n",
        "            return None\n",
        "        return max(self.products, key=lambda p: p.calculate_value())\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    warehouse = Warehouse()\n",
        "    while True:\n",
        "        name = input(\"Enter product name (or 'done' to finish): \")\n",
        "        if name.lower() == 'done':\n",
        "            break\n",
        "\n",
        "        price = float(input(\"Enter product price: \"))\n",
        "        quantity = int(input(\"Enter product quantity: \"))\n",
        "        product = Product(name, price, quantity)\n",
        "        warehouse.add_product(product)\n",
        "\n",
        "    most_valuable = warehouse.most_valuable_product()\n",
        "    if most_valuable:\n",
        "        print(f\"The most valuable product is: {most_valuable.name} with a total value of {most_valuable.calculate_value()}\")\n",
        "    else:\n",
        "        print(\"No products in the warehouse.\")\n",
        "\n"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Most Valuable Product: Laptop, Value: 600000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Objective:\n",
        "The goal was to use AI-assisted code completion (e.g., GitHub Copilot, Cursor, or Gemini in Google Colab) to speed up writing Python classes for an inventory management system.\n",
        "\n",
        "#Experience:\n",
        "\n",
        "While defining the Product class, AI correctly suggested the __init__ method after typing the attributes (name, price, quantity).\n",
        "\n",
        "The calculate_value() method suggestion was also accurate: return self.price * self.quantity.\n",
        "\n",
        "For the Warehouse class, AI suggested initializing an empty list (self.products = []).\n",
        "\n",
        "While writing add_product, AI immediately suggested using append(), which was correct.\n",
        "\n",
        "For the most valuable product, AI suggested using max() with a lambda, which was both relevant and efficient.\n",
        "\n",
        "#Manual Edits:\n",
        "\n",
        "Added a display_most_valuable_product() method manually to improve readability.\n",
        "\n",
        "Added test cases (if __name__ == \"__main__\") manually.\n",
        "\n",
        "Adjusted formatting and comments for clarity."
      ],
      "metadata": {
        "id": "nJIdzmSDEPEy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Reflection\n",
        "AI suggestions were contextually relevant and reduced syntax errors. However, I had to refine some methods for clarity and testing. Overall, AI accelerated development but still required human oversight to ensure logic correctness and readability.\n"
      ],
      "metadata": {
        "id": "Gx2YYNVi_eod"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " # conclusion\n",
        " AI-assisted code completion is highly effective for reducing boilerplate coding and avoiding syntax errors. However, developers must review suggestions carefully to maintain correctness and adaptability in real-world applications."
      ],
      "metadata": {
        "id": "r90tgfcGEAc-"
      }
    }
  ]
}